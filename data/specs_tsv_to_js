#!/usr/bin/env nodejs

// Read transistor.tsv and convert it to transistor.js
var fs = require('fs');
var path = require('path');

var t = fs.readFileSync('stripboard_specs_transistor.tsv', 'utf8').trim().split('\n');
var i, c, o = {};
for (i = 1; i < t.length; i++) {
    c = t[i].split('\t');
    o[c[1]] = {
        kind: c[2],
        package: c[3],
        pinout: c[4]
    };
}
fs.writeFileSync(
    '../js/stripboard/specs_transistor.js', 
    '// Transistor specifications\n// This file was generated by data/specs_tsv_to_js\n\nSC.specsTransistor = ' + JSON.stringify(o, undefined, 4) + ';'
);

// DIP info
var size;
t = fs.readFileSync('stripboard_specs_dip.tsv', 'utf8').trim().split('\n');
o = {};
for (i = 1; i < t.length; i++) {
    c = t[i].split('\t');
    size = c[2];
    o[size] = o[size] || {};
    o[size][c[1]] = {
        pinout: c[3], //.split(','),
        schematic: c[4] //.split(',')
    };
}
fs.writeFileSync(
    '../js/stripboard/specs_dip.js', 
    '// DIP specifications\n// This file was generated by data/specs_tsv_to_js\n\nSC.specsDip = ' + JSON.stringify(o, undefined, 4) + ';'
);

// Package pin origin
t = fs.readFileSync('stripboard_package.tsv', 'utf8').trim().split('\n');
o = {};
for (i = 1; i < t.length; i++) {
    c = t[i].split('\t');
    size = c[1];
    o[size] = {
        x: parseFloat(c[2]),
        y: parseFloat(c[3])
    };
}
fs.writeFileSync(
    '../js/stripboard/specs_package.js', 
    '// Package pin offset specifications\n// This file was generated by data/specs_tsv_to_js\n\nSC.specsPackage = ' + JSON.stringify(o, undefined, 4) + ';'
);

// Anchors
var size;
t = fs.readFileSync('schematic_specs_anchor.tsv', 'utf8').trim().split('\n');
o = {};
for (i = 1; i < t.length; i++) {
    c = t[i].split('\t');
    o[c[1]] = {
        name: {x1: c[2], y1: c[3], x2: c[4], y2: c[5]},
        value: {x1: c[6], y1: c[7], x2: c[8], y2: c[9]}
    };
}
fs.writeFileSync(
    '../js/schematic/specs_anchor.js',
    '// Component name/value label placement anchors\n// This file was generated by data/specs_tsv_to_js\n\nSC.specsAnchor = ' + JSON.stringify(o, undefined, 4) + ';'
);

// Pin
var name, pin, x, y, a = [];
t = fs.readFileSync('schematic_specs_pin.tsv', 'utf8').trim().split('\n');
o = {};
for (i = 1; i < t.length; i++) {
    c = t[i].split('\t');
    name = c[1];
    pin = c[2];
    x = parseInt(c[3], 10);
    y = parseInt(c[4], 10);
    if (i === t.length - 1) {
        a.push({x: x, y: y, name: pin});
        break;
    }
    if (name !== '' || i === t.length - 1) {
        a = [];
        o[name] = a;
    }
    a.push({x: x, y: y, name: pin});
}
fs.writeFileSync(
    '../js/schematic/specs_pin.js', 
    '// Component pins specification\n// This file was generated by data/specs_tsv_to_js\n\nSC.specsPin = ' + JSON.stringify(o, undefined, 4) + ';'
);
